// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gateway.proto

#ifndef PROTOBUF_INCLUDED_Gateway_2eproto
#define PROTOBUF_INCLUDED_Gateway_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Gateway_2eproto 

namespace protobuf_Gateway_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Gateway_2eproto
class HumidityData;
class HumidityDataDefaultTypeInternal;
extern HumidityDataDefaultTypeInternal _HumidityData_default_instance_;
class LedControl;
class LedControlDefaultTypeInternal;
extern LedControlDefaultTypeInternal _LedControl_default_instance_;
class TemperatureData;
class TemperatureDataDefaultTypeInternal;
extern TemperatureDataDefaultTypeInternal _TemperatureData_default_instance_;
namespace google {
namespace protobuf {
template<> ::HumidityData* Arena::CreateMaybeMessage<::HumidityData>(Arena*);
template<> ::LedControl* Arena::CreateMaybeMessage<::LedControl>(Arena*);
template<> ::TemperatureData* Arena::CreateMaybeMessage<::TemperatureData>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TemperatureData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TemperatureData) */ {
 public:
  TemperatureData();
  virtual ~TemperatureData();

  TemperatureData(const TemperatureData& from);

  inline TemperatureData& operator=(const TemperatureData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TemperatureData(TemperatureData&& from) noexcept
    : TemperatureData() {
    *this = ::std::move(from);
  }

  inline TemperatureData& operator=(TemperatureData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TemperatureData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TemperatureData* internal_default_instance() {
    return reinterpret_cast<const TemperatureData*>(
               &_TemperatureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TemperatureData* other);
  friend void swap(TemperatureData& a, TemperatureData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TemperatureData* New() const final {
    return CreateMaybeMessage<TemperatureData>(NULL);
  }

  TemperatureData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TemperatureData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TemperatureData& from);
  void MergeFrom(const TemperatureData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TemperatureData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sensor_id = 1;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::std::string& sensor_id() const;
  void set_sensor_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_id(::std::string&& value);
  #endif
  void set_sensor_id(const char* value);
  void set_sensor_id(const char* value, size_t size);
  ::std::string* mutable_sensor_id();
  ::std::string* release_sensor_id();
  void set_allocated_sensor_id(::std::string* sensor_id);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // float temperatura = 2;
  void clear_temperatura();
  static const int kTemperaturaFieldNumber = 2;
  float temperatura() const;
  void set_temperatura(float value);

  // @@protoc_insertion_point(class_scope:TemperatureData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sensor_id_;
  ::google::protobuf::int64 timestamp_;
  float temperatura_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LedControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LedControl) */ {
 public:
  LedControl();
  virtual ~LedControl();

  LedControl(const LedControl& from);

  inline LedControl& operator=(const LedControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LedControl(LedControl&& from) noexcept
    : LedControl() {
    *this = ::std::move(from);
  }

  inline LedControl& operator=(LedControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LedControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LedControl* internal_default_instance() {
    return reinterpret_cast<const LedControl*>(
               &_LedControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LedControl* other);
  friend void swap(LedControl& a, LedControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LedControl* New() const final {
    return CreateMaybeMessage<LedControl>(NULL);
  }

  LedControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LedControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LedControl& from);
  void MergeFrom(const LedControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string led_id = 1;
  void clear_led_id();
  static const int kLedIdFieldNumber = 1;
  const ::std::string& led_id() const;
  void set_led_id(const ::std::string& value);
  #if LANG_CXX11
  void set_led_id(::std::string&& value);
  #endif
  void set_led_id(const char* value);
  void set_led_id(const char* value, size_t size);
  ::std::string* mutable_led_id();
  ::std::string* release_led_id();
  void set_allocated_led_id(::std::string* led_id);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // bool ligar = 2;
  void clear_ligar();
  static const int kLigarFieldNumber = 2;
  bool ligar() const;
  void set_ligar(bool value);

  // @@protoc_insertion_point(class_scope:LedControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr led_id_;
  ::google::protobuf::int64 timestamp_;
  bool ligar_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumidityData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HumidityData) */ {
 public:
  HumidityData();
  virtual ~HumidityData();

  HumidityData(const HumidityData& from);

  inline HumidityData& operator=(const HumidityData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumidityData(HumidityData&& from) noexcept
    : HumidityData() {
    *this = ::std::move(from);
  }

  inline HumidityData& operator=(HumidityData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumidityData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumidityData* internal_default_instance() {
    return reinterpret_cast<const HumidityData*>(
               &_HumidityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(HumidityData* other);
  friend void swap(HumidityData& a, HumidityData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumidityData* New() const final {
    return CreateMaybeMessage<HumidityData>(NULL);
  }

  HumidityData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumidityData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumidityData& from);
  void MergeFrom(const HumidityData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumidityData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sensor_id = 1;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::std::string& sensor_id() const;
  void set_sensor_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_id(::std::string&& value);
  #endif
  void set_sensor_id(const char* value);
  void set_sensor_id(const char* value, size_t size);
  ::std::string* mutable_sensor_id();
  ::std::string* release_sensor_id();
  void set_allocated_sensor_id(::std::string* sensor_id);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // float umidade = 2;
  void clear_umidade();
  static const int kUmidadeFieldNumber = 2;
  float umidade() const;
  void set_umidade(float value);

  // @@protoc_insertion_point(class_scope:HumidityData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sensor_id_;
  ::google::protobuf::int64 timestamp_;
  float umidade_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Gateway_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TemperatureData

// string sensor_id = 1;
inline void TemperatureData::clear_sensor_id() {
  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TemperatureData::sensor_id() const {
  // @@protoc_insertion_point(field_get:TemperatureData.sensor_id)
  return sensor_id_.GetNoArena();
}
inline void TemperatureData::set_sensor_id(const ::std::string& value) {
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TemperatureData.sensor_id)
}
#if LANG_CXX11
inline void TemperatureData::set_sensor_id(::std::string&& value) {
  
  sensor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TemperatureData.sensor_id)
}
#endif
inline void TemperatureData::set_sensor_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TemperatureData.sensor_id)
}
inline void TemperatureData::set_sensor_id(const char* value, size_t size) {
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TemperatureData.sensor_id)
}
inline ::std::string* TemperatureData::mutable_sensor_id() {
  
  // @@protoc_insertion_point(field_mutable:TemperatureData.sensor_id)
  return sensor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TemperatureData::release_sensor_id() {
  // @@protoc_insertion_point(field_release:TemperatureData.sensor_id)
  
  return sensor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TemperatureData::set_allocated_sensor_id(::std::string* sensor_id) {
  if (sensor_id != NULL) {
    
  } else {
    
  }
  sensor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_id);
  // @@protoc_insertion_point(field_set_allocated:TemperatureData.sensor_id)
}

// float temperatura = 2;
inline void TemperatureData::clear_temperatura() {
  temperatura_ = 0;
}
inline float TemperatureData::temperatura() const {
  // @@protoc_insertion_point(field_get:TemperatureData.temperatura)
  return temperatura_;
}
inline void TemperatureData::set_temperatura(float value) {
  
  temperatura_ = value;
  // @@protoc_insertion_point(field_set:TemperatureData.temperatura)
}

// int64 timestamp = 3;
inline void TemperatureData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TemperatureData::timestamp() const {
  // @@protoc_insertion_point(field_get:TemperatureData.timestamp)
  return timestamp_;
}
inline void TemperatureData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TemperatureData.timestamp)
}

// -------------------------------------------------------------------

// LedControl

// string led_id = 1;
inline void LedControl::clear_led_id() {
  led_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedControl::led_id() const {
  // @@protoc_insertion_point(field_get:LedControl.led_id)
  return led_id_.GetNoArena();
}
inline void LedControl::set_led_id(const ::std::string& value) {
  
  led_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LedControl.led_id)
}
#if LANG_CXX11
inline void LedControl::set_led_id(::std::string&& value) {
  
  led_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LedControl.led_id)
}
#endif
inline void LedControl::set_led_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  led_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LedControl.led_id)
}
inline void LedControl::set_led_id(const char* value, size_t size) {
  
  led_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LedControl.led_id)
}
inline ::std::string* LedControl::mutable_led_id() {
  
  // @@protoc_insertion_point(field_mutable:LedControl.led_id)
  return led_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedControl::release_led_id() {
  // @@protoc_insertion_point(field_release:LedControl.led_id)
  
  return led_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedControl::set_allocated_led_id(::std::string* led_id) {
  if (led_id != NULL) {
    
  } else {
    
  }
  led_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), led_id);
  // @@protoc_insertion_point(field_set_allocated:LedControl.led_id)
}

// bool ligar = 2;
inline void LedControl::clear_ligar() {
  ligar_ = false;
}
inline bool LedControl::ligar() const {
  // @@protoc_insertion_point(field_get:LedControl.ligar)
  return ligar_;
}
inline void LedControl::set_ligar(bool value) {
  
  ligar_ = value;
  // @@protoc_insertion_point(field_set:LedControl.ligar)
}

// int64 timestamp = 3;
inline void LedControl::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LedControl::timestamp() const {
  // @@protoc_insertion_point(field_get:LedControl.timestamp)
  return timestamp_;
}
inline void LedControl::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:LedControl.timestamp)
}

// -------------------------------------------------------------------

// HumidityData

// string sensor_id = 1;
inline void HumidityData::clear_sensor_id() {
  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HumidityData::sensor_id() const {
  // @@protoc_insertion_point(field_get:HumidityData.sensor_id)
  return sensor_id_.GetNoArena();
}
inline void HumidityData::set_sensor_id(const ::std::string& value) {
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HumidityData.sensor_id)
}
#if LANG_CXX11
inline void HumidityData::set_sensor_id(::std::string&& value) {
  
  sensor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HumidityData.sensor_id)
}
#endif
inline void HumidityData::set_sensor_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HumidityData.sensor_id)
}
inline void HumidityData::set_sensor_id(const char* value, size_t size) {
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HumidityData.sensor_id)
}
inline ::std::string* HumidityData::mutable_sensor_id() {
  
  // @@protoc_insertion_point(field_mutable:HumidityData.sensor_id)
  return sensor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HumidityData::release_sensor_id() {
  // @@protoc_insertion_point(field_release:HumidityData.sensor_id)
  
  return sensor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HumidityData::set_allocated_sensor_id(::std::string* sensor_id) {
  if (sensor_id != NULL) {
    
  } else {
    
  }
  sensor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_id);
  // @@protoc_insertion_point(field_set_allocated:HumidityData.sensor_id)
}

// float umidade = 2;
inline void HumidityData::clear_umidade() {
  umidade_ = 0;
}
inline float HumidityData::umidade() const {
  // @@protoc_insertion_point(field_get:HumidityData.umidade)
  return umidade_;
}
inline void HumidityData::set_umidade(float value) {
  
  umidade_ = value;
  // @@protoc_insertion_point(field_set:HumidityData.umidade)
}

// int64 timestamp = 3;
inline void HumidityData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HumidityData::timestamp() const {
  // @@protoc_insertion_point(field_get:HumidityData.timestamp)
  return timestamp_;
}
inline void HumidityData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:HumidityData.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Gateway_2eproto
