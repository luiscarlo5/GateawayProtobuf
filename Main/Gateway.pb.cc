// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gateway.proto

#include "Gateway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class TemperatureDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TemperatureData>
      _instance;
} _TemperatureData_default_instance_;
class LedControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LedControl>
      _instance;
} _LedControl_default_instance_;
class HumidityDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HumidityData>
      _instance;
} _HumidityData_default_instance_;
namespace protobuf_Gateway_2eproto {
static void InitDefaultsTemperatureData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TemperatureData_default_instance_;
    new (ptr) ::TemperatureData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TemperatureData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TemperatureData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTemperatureData}, {}};

static void InitDefaultsLedControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LedControl_default_instance_;
    new (ptr) ::LedControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LedControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LedControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLedControl}, {}};

static void InitDefaultsHumidityData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HumidityData_default_instance_;
    new (ptr) ::HumidityData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HumidityData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HumidityData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHumidityData}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TemperatureData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LedControl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HumidityData.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TemperatureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TemperatureData, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TemperatureData, temperatura_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TemperatureData, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LedControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LedControl, led_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LedControl, ligar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LedControl, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HumidityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HumidityData, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HumidityData, umidade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HumidityData, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TemperatureData)},
  { 8, -1, sizeof(::LedControl)},
  { 16, -1, sizeof(::HumidityData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TemperatureData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LedControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HumidityData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Gateway.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rGateway.proto\"L\n\017TemperatureData\022\021\n\tse"
      "nsor_id\030\001 \001(\t\022\023\n\013temperatura\030\002 \001(\002\022\021\n\tti"
      "mestamp\030\003 \001(\003\">\n\nLedControl\022\016\n\006led_id\030\001 "
      "\001(\t\022\r\n\005ligar\030\002 \001(\010\022\021\n\ttimestamp\030\003 \001(\003\"E\n"
      "\014HumidityData\022\021\n\tsensor_id\030\001 \001(\t\022\017\n\007umid"
      "ade\030\002 \001(\002\022\021\n\ttimestamp\030\003 \001(\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Gateway.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Gateway_2eproto

// ===================================================================

void TemperatureData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TemperatureData::kSensorIdFieldNumber;
const int TemperatureData::kTemperaturaFieldNumber;
const int TemperatureData::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TemperatureData::TemperatureData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gateway_2eproto::scc_info_TemperatureData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TemperatureData)
}
TemperatureData::TemperatureData(const TemperatureData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor_id().size() > 0) {
    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&temperatura_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(temperatura_));
  // @@protoc_insertion_point(copy_constructor:TemperatureData)
}

void TemperatureData::SharedCtor() {
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperatura_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(temperatura_));
}

TemperatureData::~TemperatureData() {
  // @@protoc_insertion_point(destructor:TemperatureData)
  SharedDtor();
}

void TemperatureData::SharedDtor() {
  sensor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TemperatureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TemperatureData::descriptor() {
  ::protobuf_Gateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gateway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TemperatureData& TemperatureData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gateway_2eproto::scc_info_TemperatureData.base);
  return *internal_default_instance();
}


void TemperatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:TemperatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperatura_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(temperatura_));
  _internal_metadata_.Clear();
}

bool TemperatureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TemperatureData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TemperatureData.sensor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float temperatura = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temperatura_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TemperatureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TemperatureData)
  return false;
#undef DO_
}

void TemperatureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TemperatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TemperatureData.sensor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_id(), output);
  }

  // float temperatura = 2;
  if (this->temperatura() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->temperatura(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TemperatureData)
}

::google::protobuf::uint8* TemperatureData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TemperatureData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TemperatureData.sensor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_id(), target);
  }

  // float temperatura = 2;
  if (this->temperatura() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->temperatura(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TemperatureData)
  return target;
}

size_t TemperatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TemperatureData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_id());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // float temperatura = 2;
  if (this->temperatura() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TemperatureData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  const TemperatureData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TemperatureData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TemperatureData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TemperatureData)
    MergeFrom(*source);
  }
}

void TemperatureData::MergeFrom(const TemperatureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TemperatureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_id().size() > 0) {

    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.temperatura() != 0) {
    set_temperatura(from.temperatura());
  }
}

void TemperatureData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemperatureData::CopyFrom(const TemperatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TemperatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemperatureData::IsInitialized() const {
  return true;
}

void TemperatureData::Swap(TemperatureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TemperatureData::InternalSwap(TemperatureData* other) {
  using std::swap;
  sensor_id_.Swap(&other->sensor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(temperatura_, other->temperatura_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TemperatureData::GetMetadata() const {
  protobuf_Gateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gateway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LedControl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedControl::kLedIdFieldNumber;
const int LedControl::kLigarFieldNumber;
const int LedControl::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedControl::LedControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gateway_2eproto::scc_info_LedControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LedControl)
}
LedControl::LedControl(const LedControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  led_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.led_id().size() > 0) {
    led_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.led_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ligar_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(ligar_));
  // @@protoc_insertion_point(copy_constructor:LedControl)
}

void LedControl::SharedCtor() {
  led_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ligar_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ligar_));
}

LedControl::~LedControl() {
  // @@protoc_insertion_point(destructor:LedControl)
  SharedDtor();
}

void LedControl::SharedDtor() {
  led_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LedControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LedControl::descriptor() {
  ::protobuf_Gateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gateway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LedControl& LedControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gateway_2eproto::scc_info_LedControl.base);
  return *internal_default_instance();
}


void LedControl::Clear() {
// @@protoc_insertion_point(message_clear_start:LedControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  led_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ligar_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(ligar_));
  _internal_metadata_.Clear();
}

bool LedControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LedControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string led_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_led_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->led_id().data(), static_cast<int>(this->led_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LedControl.led_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ligar = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ligar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LedControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LedControl)
  return false;
#undef DO_
}

void LedControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LedControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string led_id = 1;
  if (this->led_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->led_id().data(), static_cast<int>(this->led_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LedControl.led_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->led_id(), output);
  }

  // bool ligar = 2;
  if (this->ligar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ligar(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LedControl)
}

::google::protobuf::uint8* LedControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LedControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string led_id = 1;
  if (this->led_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->led_id().data(), static_cast<int>(this->led_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LedControl.led_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->led_id(), target);
  }

  // bool ligar = 2;
  if (this->ligar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ligar(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LedControl)
  return target;
}

size_t LedControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LedControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string led_id = 1;
  if (this->led_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->led_id());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // bool ligar = 2;
  if (this->ligar() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LedControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LedControl)
  GOOGLE_DCHECK_NE(&from, this);
  const LedControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LedControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LedControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LedControl)
    MergeFrom(*source);
  }
}

void LedControl::MergeFrom(const LedControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LedControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.led_id().size() > 0) {

    led_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.led_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.ligar() != 0) {
    set_ligar(from.ligar());
  }
}

void LedControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedControl::CopyFrom(const LedControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedControl::IsInitialized() const {
  return true;
}

void LedControl::Swap(LedControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedControl::InternalSwap(LedControl* other) {
  using std::swap;
  led_id_.Swap(&other->led_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(ligar_, other->ligar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LedControl::GetMetadata() const {
  protobuf_Gateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gateway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HumidityData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HumidityData::kSensorIdFieldNumber;
const int HumidityData::kUmidadeFieldNumber;
const int HumidityData::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HumidityData::HumidityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Gateway_2eproto::scc_info_HumidityData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HumidityData)
}
HumidityData::HumidityData(const HumidityData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor_id().size() > 0) {
    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&umidade_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(umidade_));
  // @@protoc_insertion_point(copy_constructor:HumidityData)
}

void HumidityData::SharedCtor() {
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&umidade_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(umidade_));
}

HumidityData::~HumidityData() {
  // @@protoc_insertion_point(destructor:HumidityData)
  SharedDtor();
}

void HumidityData::SharedDtor() {
  sensor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HumidityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HumidityData::descriptor() {
  ::protobuf_Gateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gateway_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HumidityData& HumidityData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Gateway_2eproto::scc_info_HumidityData.base);
  return *internal_default_instance();
}


void HumidityData::Clear() {
// @@protoc_insertion_point(message_clear_start:HumidityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&umidade_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(umidade_));
  _internal_metadata_.Clear();
}

bool HumidityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HumidityData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HumidityData.sensor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float umidade = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &umidade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HumidityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HumidityData)
  return false;
#undef DO_
}

void HumidityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HumidityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HumidityData.sensor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_id(), output);
  }

  // float umidade = 2;
  if (this->umidade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->umidade(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HumidityData)
}

::google::protobuf::uint8* HumidityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HumidityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HumidityData.sensor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_id(), target);
  }

  // float umidade = 2;
  if (this->umidade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->umidade(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HumidityData)
  return target;
}

size_t HumidityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HumidityData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_id());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // float umidade = 2;
  if (this->umidade() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HumidityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HumidityData)
  GOOGLE_DCHECK_NE(&from, this);
  const HumidityData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HumidityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HumidityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HumidityData)
    MergeFrom(*source);
  }
}

void HumidityData::MergeFrom(const HumidityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HumidityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_id().size() > 0) {

    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.umidade() != 0) {
    set_umidade(from.umidade());
  }
}

void HumidityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HumidityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumidityData::CopyFrom(const HumidityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HumidityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumidityData::IsInitialized() const {
  return true;
}

void HumidityData::Swap(HumidityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HumidityData::InternalSwap(HumidityData* other) {
  using std::swap;
  sensor_id_.Swap(&other->sensor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(umidade_, other->umidade_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HumidityData::GetMetadata() const {
  protobuf_Gateway_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Gateway_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TemperatureData* Arena::CreateMaybeMessage< ::TemperatureData >(Arena* arena) {
  return Arena::CreateInternal< ::TemperatureData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LedControl* Arena::CreateMaybeMessage< ::LedControl >(Arena* arena) {
  return Arena::CreateInternal< ::LedControl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HumidityData* Arena::CreateMaybeMessage< ::HumidityData >(Arena* arena) {
  return Arena::CreateInternal< ::HumidityData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
